{"version":3,"sources":["app/components/common/content/bullet_list.jsx","app/components/common/content/file_tree.jsx","app/components/common/content/gap.jsx","app/components/common/content/code.jsx","app/components/common/content/code_block.jsx","app/components/common/content/section.jsx","app/components/post/entry/20210117-build_a_ghpage_blog/links.jsx","app/components/post/entry sync /^/.//.*$","../node_modules/moment-mini/locale sync /^/.//.*$","serviceWorker.js","app/theme.jsx","app/context.jsx","app/components/common/page/header.jsx","app/components/common/page/body.jsx","app/components/common/page/footer.jsx","app/components/common/page/index.jsx","app/components/home/card.jsx","app/components/home/index.jsx","app/components/post/index.jsx","app/index.jsx","index.js","app/components/post/entry/20210117-build_a_ghpage_blog/index.jsx","app/components/post/entry/20210117-build_a_ghpage_blog/overview.jsx","app/components/post/entry/20210117-build_a_ghpage_blog/implementation.jsx"],"names":["useStyles","makeStyles","theme","bulletListBoxStyle","paddingTop","spacing","paddingBottom","BulletListView","children","Box","className","Paper","List","dense","BulletListItem","useState","checked","setChecked","ListItem","ListItemIcon","onClick","prev","Checkbox","disableRipple","fileTreeBoxStyle","FileTreeView","TreeView","defaultCollapseIcon","defaultExpandIcon","FileTreeItem","text","TreeItem","nodeId","label","gapBoxStyle","Gap","Code","language","hljs","initHighlightingOnLoad","codeBlockBoxStyle","CodeBlock","ref","useRef","useEffect","current","highlightBlock","headingBoxStyle","childrenBoxStyle","Section","heading","Typography","variant","Divider","links","createReactApp","href","color","ghPages","materialUI","reactRouter","map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","Boolean","window","location","hostname","match","lightTheme","createMuiTheme","palette","type","AppContext","React","createContext","Header","Link","style","textDecoration","key","bodyBoxStyle","padding","Body","Footer","Page","Card","link","content","description","gridStyle","Home","posts","useContext","Grid","container","entries","item","xs","md","lg","xl","titleBoxStyle","componentBoxStyle","Post","post","title","Component","Container","listing","require","fromEntries","App","setLocation","handleLocationUpdate","addEventListener","removeEventListener","useLocation","URLSearchParams","search","get","ThemeProvider","Provider","value","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","Overview","Implementation"],"mappings":"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","file":"static/js/main.5b6e3eeb.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport {\n  Box,\n  Paper,\n  List,\n  ListItem,\n  ListItemIcon,\n  Checkbox,\n} from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme) => ({\n  bulletListBoxStyle: {\n    paddingTop: theme.spacing(2),\n    paddingBottom: theme.spacing(2),\n  },\n}));\n\nconst BulletListView = ({ children }) => {\n  const { bulletListBoxStyle } = useStyles();\n  return (\n    <Box className={bulletListBoxStyle}>\n      <Paper>\n        <List dense>{children}</List>\n      </Paper>\n    </Box>\n  );\n};\n\nconst BulletListItem = ({ children }) => {\n  const [checked, setChecked] = useState(false);\n  const toggle = () => {\n    setChecked((prev) => !prev);\n  };\n  return (\n    <ListItem>\n      <ListItemIcon onClick={toggle}>\n        <Checkbox checked={checked} disableRipple />\n      </ListItemIcon>\n      {children}\n    </ListItem>\n  );\n};\n\nexport { BulletListView, BulletListItem };\n","import React from \"react\";\nimport { Box, Paper } from \"@material-ui/core\";\nimport { TreeView, TreeItem } from \"@material-ui/lab\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\n\nconst useStyles = makeStyles((theme) => ({\n  fileTreeBoxStyle: {\n    paddingTop: theme.spacing(2),\n    paddingBottom: theme.spacing(2),\n  },\n}));\n\nconst FileTreeView = ({ children }) => {\n  const { fileTreeBoxStyle } = useStyles();\n  return (\n    <Box className={fileTreeBoxStyle}>\n      <Paper>\n        <TreeView\n          defaultCollapseIcon={<ExpandMoreIcon />}\n          defaultExpandIcon={<ChevronRightIcon />}\n        >\n          {children}\n        </TreeView>\n      </Paper>\n    </Box>\n  );\n};\n\nconst FileTreeItem = ({ text, children }) => {\n  return (\n    <TreeItem nodeId={text} label={text}>\n      {children}\n    </TreeItem>\n  );\n};\n\nexport { FileTreeView, FileTreeItem };\n","import React from \"react\";\nimport { Box } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme) => ({\n  gapBoxStyle: {\n    paddingTop: theme.spacing(2),\n    paddingBottom: theme.spacing(2),\n  },\n}));\n\nconst Gap = () => {\n  const { gapBoxStyle } = useStyles();\n  return <Box className={gapBoxStyle} />;\n};\n\nexport default Gap;\n","import React from \"react\";\n\nconst Code = ({ language, children }) => {\n  return <code className={language}>{children}</code>;\n};\n\nexport default Code;\n","import React, { useRef, useEffect } from \"react\";\nimport { Box } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport hljs from \"highlightjs\";\nimport \"highlightjs/styles/codepen-embed.css\";\n\nhljs.initHighlightingOnLoad();\n\nconst useStyles = makeStyles((theme) => ({\n  codeBlockBoxStyle: {\n    paddingTop: theme.spacing(2),\n    paddingBottom: theme.spacing(2),\n  },\n}));\n\nconst CodeBlock = ({ language, children }) => {\n  const ref = useRef();\n  const { codeBlockBoxStyle } = useStyles();\n  useEffect(() => {\n    if (ref.current) {\n      hljs.highlightBlock(ref.current);\n    }\n  }, []);\n  return (\n    <Box className={codeBlockBoxStyle}>\n      <pre ref={ref}>\n        <code className={language}>{children}</code>\n      </pre>\n    </Box>\n  );\n};\n\nexport default CodeBlock;\n","import React from \"react\";\nimport { Box, Divider, Typography } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme) => ({\n  headingBoxStyle: {\n    paddingTop: theme.spacing(2),\n  },\n  childrenBoxStyle: {\n    paddingTop: theme.spacing(1),\n    paddingBottom: theme.spacing(1),\n  },\n}));\n\nconst Section = ({ heading, children }) => {\n  const { headingBoxStyle, childrenBoxStyle } = useStyles();\n  return (\n    <>\n      <Box className={headingBoxStyle}>\n        <Typography variant=\"h5\">{heading}</Typography>\n      </Box>\n      <Box className={childrenBoxStyle}>{children}</Box>\n      <Divider />\n    </>\n  );\n};\n\nexport default Section;\n","import React from \"react\";\nimport { Link } from \"@material-ui/core\";\n\nconst links = {\n  createReactApp: (\n    <Link\n      href={\"https://reactjs.org/docs/create-a-new-react-app.html\"}\n      color=\"secondary\"\n    >\n      create-react-app\n    </Link>\n  ),\n  ghPages: (\n    <Link href={\"https://www.npmjs.com/package/gh-pages\"} color=\"secondary\">\n      gh-pages\n    </Link>\n  ),\n  materialUI: (\n    <Link href={\"https://material-ui.com/\"} color=\"secondary\">\n      Material-UI\n    </Link>\n  ),\n  reactRouter: (\n    <Link href={\"https://reactrouter.com/\"} color=\"secondary\">\n      React Router\n    </Link>\n  ),\n};\n\nexport default links;\n","var map = {\n\t\"./20210117-build_a_ghpage_blog\": 67,\n\t\"./20210117-build_a_ghpage_blog/\": 67,\n\t\"./20210117-build_a_ghpage_blog/implementation\": 92,\n\t\"./20210117-build_a_ghpage_blog/implementation.jsx\": 92,\n\t\"./20210117-build_a_ghpage_blog/index\": 67,\n\t\"./20210117-build_a_ghpage_blog/index.jsx\": 67,\n\t\"./20210117-build_a_ghpage_blog/links\": 21,\n\t\"./20210117-build_a_ghpage_blog/links.jsx\": 21,\n\t\"./20210117-build_a_ghpage_blog/overview\": 91,\n\t\"./20210117-build_a_ghpage_blog/overview.jsx\": 91\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 230;","var map = {\n\t\"./locale\": 204,\n\t\"./locale.js\": 204\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 449;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createMuiTheme } from \"@material-ui/core/styles\";\n\n// eslint-disable-next-line\nconst darkTheme = createMuiTheme({\n  palette: {\n    type: \"dark\",\n  },\n});\n\nconst lightTheme = createMuiTheme({\n  palette: {},\n});\n\n// export default darkTheme;\nexport default lightTheme;\n","import React from \"react\";\n\n// A listing file contains every blog post in the repository.\n// Each file default exports the following structure:\n//\n// content {\n//  title,\n//  description,\n//  component\n// }\n//\nconst AppContext = React.createContext();\nexport default AppContext;\n","import React from \"react\";\nimport { Link } from \"@material-ui/core\";\nimport { Typography } from \"@material-ui/core\";\n\nconst Header = () => {\n  return (\n    <>\n      <Link href=\"/\" style={{ textDecoration: \"none\", color: \"inherit\" }}>\n        <Typography key=\"title\" variant=\"h5\" color=\"primary\">\n          spanishgum\n        </Typography>\n      </Link>\n    </>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\nimport { Box } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme) => ({\n  bodyBoxStyle: {\n    padding: theme.spacing(2),\n  },\n}));\n\nconst Body = ({ children }) => {\n  const { bodyBoxStyle } = useStyles();\n  return <Box className={bodyBoxStyle}>{children}</Box>;\n};\n\nexport default Body;\n","import React from \"react\";\n\nconst Footer = () => {\n  return <></>;\n};\n\nexport default Footer;\n","import React from \"react\";\nimport Header from \"./header\";\nimport Body from \"./body\";\nimport Footer from \"./footer\";\nimport { Divider } from \"@material-ui/core\";\n\nconst Page = ({ children }) => {\n  return (\n    <>\n      <Header />\n      <Divider />\n      <Body>{children}</Body>\n      <Divider />\n      <Footer />\n    </>\n  );\n};\n\nexport default Page;\n","import React from \"react\";\n// import { Link } from \"react-router-dom\";\nimport { Link } from \"@material-ui/core\";\nimport { Paper, Typography } from \"@material-ui/core\";\n\nconst Card = ({ link, content }) => {\n  // <Link to={{ pathname: \"/\", search: `?post=${link}` }}>\n  return (\n    <Link\n      href={`/?post=${link}`}\n      style={{ textDecoration: \"none\", color: \"inherit\" }}\n    >\n      <Paper>\n        <Typography>{content.description}</Typography>\n      </Paper>\n    </Link>\n  );\n};\n\nexport default Card;\n","import React, { useContext } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Grid } from \"@material-ui/core\";\nimport Page from \"../common/page\";\nimport Card from \"./card\";\nimport AppContext from \"../../context\";\n\nconst useStyles = makeStyles((theme) => ({\n  gridStyle: {\n    padding: theme.spacing(1),\n  },\n}));\n\nconst Home = () => {\n  const { posts } = useContext(AppContext);\n  const { gridStyle } = useStyles();\n\n  return (\n    <Page>\n      <Grid container>\n        {Object.entries(posts).map(([link, content]) => (\n          <Grid\n            item\n            key={link}\n            className={gridStyle}\n            xs={12}\n            md={6}\n            lg={4}\n            xl={3}\n          >\n            <Card link={link} content={content} />\n          </Grid>\n        ))}\n      </Grid>\n    </Page>\n  );\n};\n\nexport default Home;\n","import React, { useContext } from \"react\";\nimport { Box, Container, Typography } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Page from \"../common/page\";\nimport AppContext from \"../../context\";\n\nconst useStyles = makeStyles((theme) => ({\n  titleBoxStyle: {\n    paddingTop: theme.spacing(1),\n    paddingBottom: theme.spacing(1),\n  },\n  componentBoxStyle: {\n    paddingBottom: theme.spacing(1),\n  },\n}));\n\nconst Post = ({ post }) => {\n  const { posts } = useContext(AppContext);\n  const { titleBoxStyle, componentBoxStyle } = useStyles();\n  const { title, Component } = posts[post];\n\n  return (\n    <Page>\n      <Container>\n        <Box className={titleBoxStyle}>\n          <Typography variant=\"h4\">{title}</Typography>\n        </Box>\n        <Box className={componentBoxStyle}>\n          <Component />\n        </Box>\n      </Container>\n    </Page>\n  );\n};\n\nexport default Post;\n","import React, { useState, useEffect } from \"react\";\nimport { ThemeProvider } from \"@material-ui/core\";\nimport theme from \"./theme\";\nimport AppContext from \"./context\";\nimport Home from \"./components/home\";\nimport Post from \"./components/post\";\n\nconst listing = require(\"./components/post/listing.json\");\nconst posts = Object.fromEntries(\n  listing.map((item) => {\n    return [item, require(`./components/post/entry/${item}`)];\n  })\n);\n\nconst useLocation = () => {\n  const [location, setLocation] = useState(window.location);\n  const handleLocationUpdate = () => {\n    setLocation(window.location);\n  };\n  useEffect(() => {\n    window.addEventListener(\"locationListener\", handleLocationUpdate);\n    return () => {\n      window.removeEventListener(\"locationListener\", handleLocationUpdate);\n    };\n  }, []);\n  return location;\n};\n\nconst App = () => {\n  const location = useLocation();\n  const params = new URLSearchParams(location.search);\n  const post = params.get(\"post\");\n\n  return (\n    <ThemeProvider theme={theme}>\n      <AppContext.Provider value={{ posts }}>\n        {post ? <Post post={post} /> : <Home />}\n      </AppContext.Provider>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport App from \"./app\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from \"react\";\nimport { Section } from \"../../../common/content\";\nimport Overview from \"./overview\";\nimport Implementation from \"./implementation\";\n\nconst title = \"Build a github page blog in react\";\nconst description = \"Learn how to build a github page blog using react.\";\nconst Component = () => {\n  return (\n    <>\n      <Section key={\"Overview\"} heading={\"Overview\"}>\n        <Overview />\n      </Section>\n      <Section key={\"Implementation\"} heading={\"Implementation\"}>\n        <Implementation />\n      </Section>\n    </>\n  );\n};\n\nexport { title, description, Component };\n","import React from \"react\";\nimport { Typography } from \"@material-ui/core\";\nimport links from \"./links\";\nimport {\n  Gap,\n  Code,\n  CodeBlock,\n  BulletListView,\n  BulletListItem,\n} from \"../../../common/content\";\n\nconst Overview = () => {\n  return (\n    <>\n      <Typography>\n        To build a github page using react, we will use {links.createReactApp},{\" \"}\n        {links.ghPages}, and {links.materialUI}. Some things to keep in mind:\n      </Typography>\n      <BulletListView>\n        <BulletListItem>\n          <Typography>A github page is a static site</Typography>\n        </BulletListItem>\n        <BulletListItem>\n          <Typography>\n            An <Code>index.html</Code> must exist at the root of the repository\n          </Typography>\n        </BulletListItem>\n        <BulletListItem>\n          <Typography>\n            All resource paths are relative the root of the repository\n          </Typography>\n        </BulletListItem>\n        <BulletListItem>\n          <Typography>\n            Your repository must be named{\" \"}\n            <Code>{`<your-github-username>.github.io`}</Code>\n          </Typography>\n        </BulletListItem>\n      </BulletListView>\n      <Typography>\n        Because a static site is required, requests to{\" \"}\n        <Code>/some_endpoint</Code> will only be successful if a resource with\n        that name exists. You could use something like {links.reactRouter} and\n        the development server to respond to arbitrary requests, but that will\n        not work in this scenario. While tools exist to support building static\n        sites, we are going to stick to using plain {links.createReactApp} with\n        the single index file it generates.\n      </Typography>\n      <Gap />\n      <Typography>\n        Start by creating your react app and installing dependencies mentioned.\n        Note that you don't have to use {links.materialUI}. I will throughout\n        this post to provide some basic page elements. Feel free to ignore them\n        and find/build your own compnoents.\n      </Typography>\n      <CodeBlock language={\"bash\"}>\n        {`npx create-react-app $GITHUB_USERNAME.github.io\\n`}\n        {`cd $GITHUB_USERNAME.github.io\\n`}\n        {`yarn add gh-pages            # manage pushing to github\\n`}\n        {`\\n# Below are optional, choose what you want to use\\n`}\n        {`yarn add @material-ui/core   # core design components\\n`}\n        {`yarn add @material-ui/styles # theming\\n`}\n        {`yarn add @material-ui/icons  # simple icons \\n`}\n        {`yarn add @material-ui/lab    # experimental componments`}\n      </CodeBlock>\n      <Typography>\n        Next, you should add a script to your <Code>package.json</Code> for\n        quick deployment:\n      </Typography>\n      <CodeBlock language={\"json\"}>\n        {`\"scripts\": {\\n`}\n        {`  \"deploy\": \"gh-pages -b master -d build\",\\n`}\n        {`}`}\n      </CodeBlock>\n      <Typography>\n        Now every time you want to publish your site, you can run this:\n      </Typography>\n      <CodeBlock language={\"bash\"}>\n        {`yarn build\\n`}\n        {`yarn deploy`}\n      </CodeBlock>\n      <Typography>\n        You may also want to ignore the <Code>build</Code> directory in your{\" \"}\n        <Code>.gitignore</Code>.\n      </Typography>\n    </>\n  );\n};\n\nexport default Overview;\n","import React from \"react\";\nimport { Typography } from \"@material-ui/core\";\nimport links from \"./links\";\nimport {\n  Gap,\n  Code,\n  CodeBlock,\n  FileTreeView,\n  FileTreeItem,\n  BulletListView,\n  BulletListItem,\n} from \"../../../common/content\";\n\nconst Implementation = () => {\n  return (\n    <>\n      <Typography>\n        Now that we have our project, we need a way to structure our blog\n        content. We will implement the following:\n      </Typography>\n      <BulletListView>\n        <BulletListItem>\n          <Typography>A common overall page layout</Typography>\n        </BulletListItem>\n        <BulletListItem>\n          <Typography>A home component</Typography>\n        </BulletListItem>\n        <BulletListItem>\n          <Typography>A generic post component</Typography>\n        </BulletListItem>\n        <BulletListItem>\n          <Typography>A way to dynamically render specific posts</Typography>\n        </BulletListItem>\n        <BulletListItem>\n          <Typography>A context provider for posts</Typography>\n        </BulletListItem>\n      </BulletListView>\n      <Typography>\n        Below is a file hierarchy that I've worked out. I personally like when\n        imports read like English, so I've chosen to break away from the typical{\" \"}\n        {links.createReactApp} layout just a bit. If you're don't already know,\n        having an <Code>index.jsx</Code> file in your folder allows you to\n        import directly from the folder name.\n      </Typography>\n      <FileTreeView>\n        <FileTreeItem text=\"src\">\n          <FileTreeItem text=\"app\">\n            <FileTreeItem text=\"components\">\n              <FileTreeItem text=\"common\">\n                <FileTreeItem text=\"page\">\n                  <FileTreeItem text=\"body.jsx\" />\n                  <FileTreeItem text=\"footer.jsx\" />\n                  <FileTreeItem text=\"header.jsx\" />\n                  <FileTreeItem text=\"index.jsx\" />\n                </FileTreeItem>\n              </FileTreeItem>\n              <FileTreeItem text=\"home\">\n                <FileTreeItem text=\"index.jsx\" />\n              </FileTreeItem>\n              <FileTreeItem text=\"post\">\n                <FileTreeItem text=\"entry\">\n                  <FileTreeItem text=\"example_entry_using_folder\">\n                    <FileTreeItem text=\"index.json\" />\n                  </FileTreeItem>\n                  <FileTreeItem text=\"example_entry_using_file.jsx\" />\n                </FileTreeItem>\n                <FileTreeItem text=\"index.jsx\" />\n                <FileTreeItem text=\"listing.json\" />\n              </FileTreeItem>\n            </FileTreeItem>\n          </FileTreeItem>\n          <FileTreeItem text=\"context.jsx\" />\n          <FileTreeItem text=\"index.jsx\" />\n          <FileTreeItem text=\"theme.jsx\" />\n        </FileTreeItem>\n      </FileTreeView>\n      <Typography>\n        Let's start with the overall page layout. You'll notice a{\" \"}\n        <Code>src/app/components/common/page</Code> folder. This will be where\n        we define a uniform page layout so every page of your blog has a\n        consistent look and feel. Start by defining empty components for each\n        file in that folder. For example, here is an empty header component:\n      </Typography>\n      <CodeBlock language={\"jsx\"}>\n        {`// src/app/components/common/page/header.jsx\\n`}\n        {`\\n`}\n        {`import React from \"react\";\\n`}\n        {`\\n`}\n        {`const Header = () => {\\n`}\n        {`  return <></>;\\n`}\n        {`}\\n`}\n        {`\\n`}\n        {`export default Header\\n`}\n      </CodeBlock>\n      <Typography>\n        Don't worry about filling in content yet. For now, focus on the\n        structure of the code. Lets take a look at the <Code>Page</Code>{\" \"}\n        component in <Code>src/app/components/common/page/index.jsx</Code>.\n      </Typography>\n      <CodeBlock language={\"jsx\"}>\n        {`// src/app/components/common/page/index.jsx\\n`}\n        {`\\n`}\n        {`import React from \"react\";\\n`}\n        {`import { Divider } from \"@material-ui/core\";\\n`}\n        {`\\n`}\n        {`const Page = ({ children }) => {\\n`}\n        {`  return (\\n`}\n        {`    <>\\n`}\n        {`      <Header />\\n`}\n        {`      <Divider />\\n`}\n        {`      <Body>\\n`}\n        {`        {children}\\n`}\n        {`      </Body>\\n`}\n        {`      <Divider />\\n`}\n        {`      <Footer />\\n`}\n        {`    </>\\n`}\n        {`  );\\n`}\n        {`}\\n`}\n        {`\\n`}\n        {`export default Page\\n`}\n      </CodeBlock>\n      <Typography>\n        This layout allows us to define every page in terms of a{\" \"}\n        <Code>Page</Code> component. Any children will be forwarded down into\n        the <Code>Body</Code> component. This will give us a consistent look and\n        feel. Great!\n      </Typography>\n      <Gap />\n      <Typography>\n        Go ahead and create components for the <Code>Home</Code> and{\" \"}\n        <Code>Post</Code> components using their respective{\" \"}\n        <Code>index.jsx</Code> files. Each component will be defined using the{\" \"}\n        <Code>Page</Code> component we just created.\n      </Typography>\n      <CodeBlock>\n        {`// src/app/components/home/index.jsx\\n`}\n        {`\\n`}\n        {`import React from \"react\";\\n`}\n        {`import { Typography } from \"@material-ui/core\";\\n`}\n        {`\\n`}\n        {`const Home = () => {\\n`}\n        {`  return (\\n`}\n        {`    <Page>\\n`}\n        {`      <Typography>\\n`}\n        {`        Welcome to my blog!\\n`}\n        {`      </Typography>\\n`}\n        {`    </Page>\\n`}\n        {`  );\\n`}\n        {`}\\n`}\n        {`\\n`}\n        {`export default Home\\n`}\n      </CodeBlock>\n      <Typography>\n        In the <Code>Home</Code> component, I've used <Code>Typography</Code> as\n        a placeholder. We will come back to it later. For the <Code>Post</Code>{\" \"}\n        component, have it accept a <Code>post</Code> prop. For now this will be\n        a key to access our post data. We will come back to this below to show\n        how we will access the actual post content.\n      </Typography>\n      <CodeBlock>\n        {`// src/app/components/post/index.jsx\\n`}\n        {`\\n`}\n        {`import React from \"react\";\\n`}\n        {`import { Typography } from \"@material-ui/core\";\\n`}\n        {`\\n`}\n        {`const Post = ({ post }) => {\\n`}\n        {`  return (\\n`}\n        {`    <Page>\\n`}\n        {`      <Typography>\\n`}\n        {`        {post}\\n`}\n        {`      </Typography>\\n`}\n        {`      <Component />\\n`}\n        {`    </Page>\\n`}\n        {`  );\\n`}\n        {`}\\n`}\n        {`\\n`}\n        {`export default Post\\n`}\n      </CodeBlock>\n      <Typography>\n        In my blog, I've decided that content will include a <Code>title</Code>{\" \"}\n        string, and a React <Code>component</Code>. This means every I write\n        will export the following:\n      </Typography>\n      <CodeBlock language=\"json\">\n        {`{ content: { title, Component } }\\n`}\n      </CodeBlock>\n      <Typography>\n        We will keep a listing of posts in{\" \"}\n        <Code>src/components/post/entry/listing.json</Code> and generate pages\n        for them dynamically. The listing will simply be an array with the name\n        of every entry. Each time you add an entry, remember to modify this\n        file. With a listing in place, lets see how we can import this in{\" \"}\n        <Code>src/app/index.jsx</Code>:\n      </Typography>\n      <CodeBlock>\n        {`// src/app/index.jsx\\n`}\n        {`\\n`}\n        {`import React from \"react\";\\n`}\n        {`\\n`}\n        {`const listing = require(\"./components/post/listing.json\");\\n`}\n        {`const posts = Object.fromEntries(\\n`}\n        {`  listing.map((item) => {\\n`}\n        {`    return [item, require(\\`./components/post/entry/\\${item}\\`)];\\n`}\n        {`  })\\n`}\n        {`);`}\n      </CodeBlock>\n      <Typography>\n        This will create a mapping of the names of posts to their content. Now\n        that posts are loaded, we need a way to render the correct content.\n        Remember this is a static site, so every page will use <Code>/</Code>.\n        We can however make use of URL query paramters!\n      </Typography>\n      <Gap />\n      <Typography>\n        First off, if you just try to blindly use <Code>window.location</Code>,\n        you'll find that the page will not re-render when you click on a link.\n        What we need to do is tell react to \"react\" when{\" \"}\n        <Code>window.location</Code> changes. Here is a useful hook that allows\n        us to do this:\n      </Typography>\n      <CodeBlock>\n        {`// src/app/index.jsx\\n`}\n        {`\\n`}\n        {`import React, { useState, useEffect } from \"react\";\\n`}\n        {`\\n`}\n        {`const useLocation = () => {\\n`}\n        {`  const [location, setLocation] = useState(window.location);\\n`}\n        {`  const handleLocationUpdate = () => {\\n`}\n        {`    setLocation(window.location);\\n`}\n        {`  };\\n`}\n        {`  useEffect(() => {\\n`}\n        {`    window.addEventListener(\"locationListener\", handleLocationUpdate);\\n`}\n        {`    return () => {\\n`}\n        {`      window.removeEventListener(\"locationListener\", handleLocationUpdate);\\n`}\n        {`    };\\n`}\n        {`  }, []);\\n`}\n        {`  return location;\\n`}\n        {`};\\n`}\n      </CodeBlock>\n      <Typography>\n        This kind of combination of <Code>useState</Code> and{\" \"}\n        <Code>useEffect</Code> are very common in React applications. We can now\n        call this hook directly in our <Code>App</Code> component and render the\n        correct page.\n      </Typography>\n      <CodeBlock language={\"jsx\"}>\n        {`// src/app/index.jsx\\n`}\n        {`\\n`}\n        {`import React from \"react\";\\n`}\n        {`import Home from \"./components/home\";\\n`}\n        {`import Post from \"./components/post\";\\n`}\n        {`\\n`}\n        {`const App = () => {\\n`}\n        {`  const location = useLocation();\\n`}\n        {`  const params = new URLSearchParams(location.search);\\n`}\n        {`  const post = params.get(\"post\");\\n`}\n        {`\\n`}\n        {`  return (\\n`}\n        {`    <>\\n`}\n        {`      {post ? <Post post={post} /> : <Home />}\\n`}\n        {`    </>\\n`}\n        {`  )\\n`}\n        {`}\\n`}\n        {`\\n`}\n        {`export default App;\\n`}\n      </CodeBlock>\n      <Typography>\n        At this point all you need to is create your first post entry! Don't\n        forget, you will need to export a content object. This can be as simple\n        as this:\n      </Typography>\n      <CodeBlock language=\"jsx\">\n        {`// src/app/components/post/entry/new_entry.jsx\\n`}\n        {`\\n`}\n        {`import React from \"react\";\\n`}\n        {`\\n`}\n        {`const title = \"Hello, World!\";\\n`}\n        {`const Component = () => {\\n`}\n        {`\\n`}\n        {`  return (\\n`}\n        {`    <Typography>\\n`}\n        {`      Welcome to my first blog post!\\n`}\n        {`    <Typography/>\\n`}\n        {`  )\\n`}\n        {`}\\n`}\n        {`\\n`}\n        {`const content = { title, Component }\\n`}\n        {`export default content;\\n`}\n      </CodeBlock>\n      <Gap />\n      <Typography>\n        Ok, almost done. Recall that we only passed the URL parameter{\" \"}\n        <Code>post</Code> as a prop to the <Code>Post</Code> component in{\" \"}\n        <Code>App</Code>. Obviously this is only a string, not the actual\n        content from the post entry. One thing we could do is load the component\n        from the <Code>posts</Code> table we created in <Code>App</Code>. While\n        this would be perfectly acceptable in this case, I'm going to show you\n        how we can use a react context.\n      </Typography>\n      <Gap />\n      <Typography>\n        Start by defining the context in <Code>src/app/context.jsx</Code>:\n      </Typography>\n      <CodeBlock>\n        {`// src/app/context.jsx\\n`}\n        {`\\n`}\n        {`import React from \"react\";\\n`}\n        {`\\n`}\n        {`const AppContext = React.createContext();\\n`}\n        {`export default AppContext;\\n`}\n      </CodeBlock>\n      <Typography>\n        Next, lets revisit out <Code>App</Code> component. Go back and import\n        the context, then wrap the return code with a provider as follows:\n      </Typography>\n      <CodeBlock language={\"jsx\"}>\n        {`// src/app/index.jsx\\n`}\n        {`\\n`}\n        {`import AppContext \"./context\";\\n`}\n        {`// ...\\n`}\n        {`\\n`}\n        {`const App = () => {\\n`}\n        {`  return (\\n`}\n        {`    <AppContext.Provider value={{ posts }}>\\n`}\n        {`      {/*...*/}\\n`}\n        {`    </AppContext.Provider>\\n`}\n        {`  )\\n`}\n        {`}\\n`}\n        {`\\n`}\n        {`// ...\\n`}\n      </CodeBlock>\n      <Typography>\n        Now every component that exists \"beneath\" the provider will have the\n        context made available to them!\n      </Typography>\n      <Gap />\n      <Typography>\n        So lets revist our <Code>Home</Code> component, and use the react\n        context hook <Code>useContext</Code>. This will give you access to every\n        post! It's up to you on how you wish to showcase them. I've used the{\" \"}\n        {links.materialUI} <Code>Grid</Code> component and a custom{\" \"}\n        <Code>Card</Code> component.\n      </Typography>\n      <CodeBlock language={\"jsx\"}>\n        {`// src/app/components/home/index.jsx\\n`}\n        {`\\n`}\n        {`import React, { useContext } from \"react\";\\n`}\n        {`import AppContext from \"../../context\";\\n`}\n        {`import { Grid } from \"@material-ui/core\";\\n`}\n        {`import Card from \"./card\"; // define this how you like\\n`}\n        {`\\n`}\n        {`const Home = () => {\\n`}\n        {`  const { posts } = useContext(AppContext)\\n`}\n        {`  return (\\n`}\n        {`    <Page>\\n`}\n        {`      <Grid container>\\n`}\n        {`        {posts.map((post) => (\\n`}\n        {`          <Grid\\n`}\n        {`            item\\n`}\n        {`            key={post.link}\\n`}\n        {`            className={gridStyle}\\n`}\n        {`            xs={12}\\n`}\n        {`            md={6}\\n`}\n        {`            lg={4}\\n`}\n        {`            xl={3}\\n`}\n        {`          >\\n`}\n        {`            <Card post={post} />\\n`}\n        {`          </Grid>\\n`}\n        {`        ))}\\n`}\n        {`      </Grid>\\n`}\n        {`    </Page>\\n`}\n        {`  );\\n`}\n        {`}\\n`}\n        {`\\n`}\n        {`// ...\\n`}\n      </CodeBlock>\n      <Typography>\n        Lets also revist our <Code>Post</Code> component. Recall that we passed\n        a <Code>post</Code> key as a prop. We can now use that key to get the\n        content!\n      </Typography>\n      <CodeBlock language={\"jsx\"}>\n        {`// src/app/components/post/index.jsx\\n`}\n        {`\\n`}\n        {`import React, { useContext } from \"react\";\\n`}\n        {`import { Typography } from \"@material-ui/core\";\\n`}\n        {`import AppContext from \"../../context\";\\n`}\n        {`\\n`}\n        {`const Post = ({ post }) => {\\n`}\n        {`  const { posts } = useContext(AppContext)\\n`}\n        {`  const { title, Component } = posts[post];\\n`}\n        {`  return (\\n`}\n        {`    <Page>\\n`}\n        {`      <Typography>\\n`}\n        {`        {title}\\n`}\n        {`      </Typography>\\n`}\n        {`      <Component />\\n`}\n        {`    </Page>\\n`}\n        {`  );\\n`}\n        {`}\\n`}\n        {`\\n`}\n        {`export default Post\\n`}\n      </CodeBlock>\n      <Typography>\n        Well that pretty much covers everything! At this point, you should\n        consider creating reusable components for every post you make. For\n        example, the check lists, code blocks, and file hierarchy you see on\n        this page are components I've added to{\" \"}\n        <Code>src/app/components/common/content</Code>. All that's left is\n        adding sex appeal to your blog! Happy coding!\n      </Typography>\n      <Gap />\n      <Typography>Cheers</Typography>\n    </>\n  );\n};\n\nexport default Implementation;\n"],"sourceRoot":""}