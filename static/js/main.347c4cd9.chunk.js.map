{"version":3,"sources":["app/components/post/entry/20210117-build_a_ghpage_blog/links.jsx","app/components/common/content/bullet_list.jsx","app/components/common/content/file_tree.jsx","app/components/common/content/gap.jsx","app/components/common/content/code.jsx","app/components/common/content/code_block.jsx","app/components/common/content/section.jsx","app/components/post/entry sync /^/.//.*$","../node_modules/moment-mini/locale sync /^/.//.*$","serviceWorker.js","app/theme.jsx","app/context.jsx","app/components/common/page/header.jsx","app/components/common/page/body.jsx","app/components/common/page/footer.jsx","app/components/common/page/index.jsx","app/components/home/card.jsx","app/components/home/index.jsx","app/components/post/index.jsx","app/index.jsx","index.js","app/components/post/entry/20210117-build_a_ghpage_blog/index.jsx","app/components/post/entry/20210117-build_a_ghpage_blog/overview.jsx","app/components/post/entry/20210117-build_a_ghpage_blog/structure.jsx"],"names":["links","createReactApp","href","color","ghPages","materialUI","reactRouter","useStyles","makeStyles","theme","bulletListBoxStyle","padding","spacing","BulletListView","children","Box","className","Paper","List","dense","BulletListItem","useState","checked","setChecked","ListItem","ListItemIcon","onClick","prev","Checkbox","disableRipple","fileTreeBoxStyle","FileTreeView","TreeView","defaultCollapseIcon","defaultExpandIcon","FileTreeItem","text","TreeItem","nodeId","label","gapBoxStyle","Gap","Code","language","hljs","initHighlightingOnLoad","codeBlockBoxStyle","CodeBlock","ref","useRef","useEffect","current","highlightBlock","headingBoxStyle","paddingTop","childrenBoxStyle","Section","heading","Typography","variant","Divider","map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","Boolean","window","location","hostname","match","lightTheme","createMuiTheme","palette","type","AppContext","React","createContext","Header","Link","style","textDecoration","key","bodyBoxStyle","Body","Footer","Page","Card","link","content","description","gridStyle","Home","posts","useContext","Grid","container","entries","item","xs","md","lg","xl","titleBoxStyle","paddingBottom","componentBoxStyle","Post","post","title","Component","Container","listing","require","fromEntries","App","setLocation","handleLocationUpdate","addEventListener","removeEventListener","useLocation","URLSearchParams","search","get","ThemeProvider","Provider","value","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","Overview","Structure"],"mappings":"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","file":"static/js/main.347c4cd9.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"@material-ui/core\";\n\nconst links = {\n  createReactApp: (\n    <Link\n      href={\"https://reactjs.org/docs/create-a-new-react-app.html\"}\n      color=\"secondary\"\n    >\n      create-react-app\n    </Link>\n  ),\n  ghPages: (\n    <Link href={\"https://www.npmjs.com/package/gh-pages\"} color=\"secondary\">\n      gh-pages\n    </Link>\n  ),\n  materialUI: (\n    <Link href={\"https://material-ui.com/\"} color=\"secondary\">\n      Material-UI\n    </Link>\n  ),\n  reactRouter: (\n    <Link href={\"https://reactrouter.com/\"} color=\"secondary\">\n      React Router\n    </Link>\n  ),\n};\n\nexport default links;\n","import React, { useState } from \"react\";\nimport {\n  Box,\n  Paper,\n  List,\n  ListItem,\n  ListItemIcon,\n  Checkbox,\n} from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme) => ({\n  bulletListBoxStyle: {\n    padding: theme.spacing(2),\n  },\n}));\n\nconst BulletListView = ({ children }) => {\n  const { bulletListBoxStyle } = useStyles();\n  return (\n    <Box className={bulletListBoxStyle}>\n      <Paper>\n        <List dense>{children}</List>\n      </Paper>\n    </Box>\n  );\n};\n\nconst BulletListItem = ({ children }) => {\n  const [checked, setChecked] = useState(false);\n  const toggle = () => {\n    setChecked((prev) => !prev);\n  };\n  return (\n    <ListItem>\n      <ListItemIcon onClick={toggle}>\n        <Checkbox checked={checked} disableRipple />\n      </ListItemIcon>\n      {children}\n    </ListItem>\n  );\n};\n\nexport { BulletListView, BulletListItem };\n","import React from \"react\";\nimport { Box, Paper } from \"@material-ui/core\";\nimport { TreeView, TreeItem } from \"@material-ui/lab\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\n\nconst useStyles = makeStyles((theme) => ({\n  fileTreeBoxStyle: {\n    padding: theme.spacing(2),\n  },\n}));\n\nconst FileTreeView = ({ children }) => {\n  const { fileTreeBoxStyle } = useStyles();\n  return (\n    <Box className={fileTreeBoxStyle}>\n      <Paper>\n        <TreeView\n          defaultCollapseIcon={<ExpandMoreIcon />}\n          defaultExpandIcon={<ChevronRightIcon />}\n        >\n          {children}\n        </TreeView>\n      </Paper>\n    </Box>\n  );\n};\n\nconst FileTreeItem = ({ text, children }) => {\n  return (\n    <TreeItem nodeId={text} label={text}>\n      {children}\n    </TreeItem>\n  );\n};\n\nexport { FileTreeView, FileTreeItem };\n","import React from \"react\";\nimport { Box } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme) => ({\n  gapBoxStyle: {\n    padding: theme.spacing(2),\n  },\n}));\n\nconst Gap = () => {\n  const { gapBoxStyle } = useStyles();\n  return <Box className={gapBoxStyle} />;\n};\n\nexport default Gap;\n","import React from \"react\";\n\nconst Code = ({ language, children }) => {\n  return <code className={language}>{children}</code>;\n};\n\nexport default Code;\n","import React, { useRef, useEffect } from \"react\";\nimport { Box } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport hljs from \"highlightjs\";\nimport \"highlightjs/styles/codepen-embed.css\";\n\nhljs.initHighlightingOnLoad();\n\nconst useStyles = makeStyles((theme) => ({\n  codeBlockBoxStyle: {\n    padding: theme.spacing(2),\n  },\n}));\n\nconst CodeBlock = ({ language, children }) => {\n  const ref = useRef();\n  const { codeBlockBoxStyle } = useStyles();\n  useEffect(() => {\n    if (ref.current) {\n      hljs.highlightBlock(ref.current);\n    }\n  }, []);\n  return (\n    <Box className={codeBlockBoxStyle}>\n      <pre ref={ref}>\n        <code className={language}>{children}</code>\n      </pre>\n    </Box>\n  );\n};\n\nexport default CodeBlock;\n","import React from \"react\";\nimport { Box, Divider, Typography } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme) => ({\n  headingBoxStyle: {\n    padding: theme.spacing(1),\n    paddingTop: theme.spacing(2),\n  },\n  childrenBoxStyle: {\n    padding: theme.spacing(1),\n  },\n}));\n\nconst Section = ({ heading, children }) => {\n  const { headingBoxStyle, childrenBoxStyle } = useStyles();\n  return (\n    <>\n      <Box className={headingBoxStyle}>\n        <Typography variant=\"h5\">{heading}</Typography>\n      </Box>\n      <Box className={childrenBoxStyle}>{children}</Box>\n      <Divider />\n    </>\n  );\n};\n\nexport default Section;\n","var map = {\n\t\"./20210117-build_a_ghpage_blog\": 67,\n\t\"./20210117-build_a_ghpage_blog/\": 67,\n\t\"./20210117-build_a_ghpage_blog/index\": 67,\n\t\"./20210117-build_a_ghpage_blog/index.jsx\": 67,\n\t\"./20210117-build_a_ghpage_blog/links\": 16,\n\t\"./20210117-build_a_ghpage_blog/links.jsx\": 16,\n\t\"./20210117-build_a_ghpage_blog/overview\": 91,\n\t\"./20210117-build_a_ghpage_blog/overview.jsx\": 91,\n\t\"./20210117-build_a_ghpage_blog/structure\": 92,\n\t\"./20210117-build_a_ghpage_blog/structure.jsx\": 92\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 230;","var map = {\n\t\"./locale\": 204,\n\t\"./locale.js\": 204\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 449;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createMuiTheme } from \"@material-ui/core/styles\";\n\n// eslint-disable-next-line\nconst darkTheme = createMuiTheme({\n  palette: {\n    type: \"dark\",\n  },\n});\n\nconst lightTheme = createMuiTheme({\n  palette: {},\n});\n\n// export default darkTheme;\nexport default lightTheme;\n","import React from \"react\";\n\n// A listing file contains every blog post in the repository.\n// Each file default exports the following structure:\n//\n// content {\n//  title,\n//  description,\n//  component\n// }\n//\nconst AppContext = React.createContext();\nexport default AppContext;\n","import React from \"react\";\nimport { Link } from \"@material-ui/core\";\nimport { Typography } from \"@material-ui/core\";\n\nconst Header = () => {\n  return (\n    <>\n      <Link href=\"/\" style={{ textDecoration: \"none\", color: \"inherit\" }}>\n        <Typography key=\"title\" variant=\"h5\" color=\"primary\">\n          spanishgum\n        </Typography>\n      </Link>\n    </>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\nimport { Box } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme) => ({\n  bodyBoxStyle: {\n    padding: theme.spacing(5),\n  },\n}));\n\nconst Body = ({ children }) => {\n  const { bodyBoxStyle } = useStyles();\n  return <Box className={bodyBoxStyle}>{children}</Box>;\n};\n\nexport default Body;\n","import React from \"react\";\n\nconst Footer = () => {\n  return <></>;\n};\n\nexport default Footer;\n","import React from \"react\";\nimport Header from \"./header\";\nimport Body from \"./body\";\nimport Footer from \"./footer\";\nimport { Divider } from \"@material-ui/core\";\n\nconst Page = ({ children }) => {\n  return (\n    <>\n      <Header />\n      <Divider />\n      <Body>{children}</Body>\n      <Divider />\n      <Footer />\n    </>\n  );\n};\n\nexport default Page;\n","import React from \"react\";\n// import { Link } from \"react-router-dom\";\nimport { Link } from \"@material-ui/core\";\nimport { Paper, Typography } from \"@material-ui/core\";\n\nconst Card = ({ link, content }) => {\n  // <Link to={{ pathname: \"/\", search: `?post=${link}` }}>\n  return (\n    <Link\n      href={`/?post=${link}`}\n      style={{ textDecoration: \"none\", color: \"inherit\" }}\n    >\n      <Paper>\n        <Typography>{content.description}</Typography>\n      </Paper>\n    </Link>\n  );\n};\n\nexport default Card;\n","import React, { useContext } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Grid } from \"@material-ui/core\";\nimport Page from \"../common/page\";\nimport Card from \"./card\";\nimport AppContext from \"../../context\";\n\nconst useStyles = makeStyles((theme) => ({\n  gridStyle: {\n    padding: theme.spacing(1),\n  },\n}));\n\nconst Home = () => {\n  const { posts } = useContext(AppContext);\n  const { gridStyle } = useStyles();\n\n  return (\n    <Page>\n      <Grid container>\n        {Object.entries(posts).map(([link, content]) => (\n          <Grid\n            item\n            key={link}\n            className={gridStyle}\n            xs={12}\n            md={6}\n            lg={4}\n            xl={3}\n          >\n            <Card link={link} content={content} />\n          </Grid>\n        ))}\n      </Grid>\n    </Page>\n  );\n};\n\nexport default Home;\n","import React, { useContext } from \"react\";\nimport { Box, Container, Typography } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Page from \"../common/page\";\nimport AppContext from \"../../context\";\n\nconst useStyles = makeStyles((theme) => ({\n  titleBoxStyle: {\n    paddingTop: theme.spacing(1),\n    paddingBottom: theme.spacing(1),\n  },\n  componentBoxStyle: {\n    paddingBottom: theme.spacing(1),\n  },\n}));\n\nconst Post = ({ post }) => {\n  const { posts } = useContext(AppContext);\n  const { titleBoxStyle, componentBoxStyle } = useStyles();\n  const { title, Component } = posts[post];\n\n  return (\n    <Page>\n      <Container>\n        <Box className={titleBoxStyle}>\n          <Typography variant=\"h4\">{title}</Typography>\n        </Box>\n        <Box className={componentBoxStyle}>\n          <Component />\n        </Box>\n      </Container>\n    </Page>\n  );\n};\n\nexport default Post;\n","import React, { useState, useEffect } from \"react\";\nimport { ThemeProvider } from \"@material-ui/core\";\nimport theme from \"./theme\";\nimport AppContext from \"./context\";\nimport Home from \"./components/home\";\nimport Post from \"./components/post\";\n\nconst listing = require(\"./components/post/listing.json\");\nconst posts = Object.fromEntries(\n  listing.map((item) => {\n    return [item, require(`./components/post/entry/${item}`)];\n  })\n);\n\nconst useLocation = () => {\n  const [location, setLocation] = useState(window.location);\n  const handleLocationUpdate = () => {\n    setLocation(window.location);\n  };\n  useEffect(() => {\n    window.addEventListener(\"locationListener\", handleLocationUpdate);\n    return () => {\n      window.removeEventListener(\"locationListener\", handleLocationUpdate);\n    };\n  }, []);\n  return location;\n};\n\nconst App = () => {\n  const location = useLocation();\n  const params = new URLSearchParams(location.search);\n  const post = params.get(\"post\");\n\n  return (\n    <ThemeProvider theme={theme}>\n      <AppContext.Provider value={{ posts }}>\n        {post ? <Post post={post} /> : <Home />}\n      </AppContext.Provider>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport App from \"./app\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from \"react\";\nimport { Section } from \"../../../common/content\";\nimport Overview from \"./overview\";\nimport Structure from \"./structure\";\n\nconst title = \"Build a github page blog in react\";\nconst description = \"Learn how to build a github page blog using react.\";\nconst Component = () => {\n  return (\n    <>\n      <Section key={\"Overview\"} heading={\"Overview\"}>\n        <Overview />\n      </Section>\n      <Section key={\"Structure\"} heading={\"Structure\"}>\n        <Structure />\n      </Section>\n    </>\n  );\n};\n\nexport { title, description, Component };\n","import React from \"react\";\nimport { Typography } from \"@material-ui/core\";\nimport links from \"./links\";\nimport {\n  Code,\n  CodeBlock,\n  BulletListView,\n  BulletListItem,\n} from \"../../../common/content\";\n\nconst Overview = () => {\n  return (\n    <>\n      <Typography>\n        To build a github page using react, we will use {links.createReactApp},{\" \"}\n        {links.ghPages}, {links.reactRouter}, and {links.materialUI}. Some\n        things to keep in mind:\n      </Typography>\n      <BulletListView>\n        <BulletListItem>\n          <Typography>A github page is a static site</Typography>\n        </BulletListItem>\n        <BulletListItem>\n          <Typography>\n            An <Code>index.html</Code> must exist at the root of the repository\n          </Typography>\n        </BulletListItem>\n        <BulletListItem>\n          <Typography>\n            All resource paths are relative the root of the repository\n          </Typography>\n        </BulletListItem>\n        <BulletListItem>\n          <Typography>\n            Your repository must be named{\" \"}\n            <Code>{`<your-github-username>.github.io`}</Code>\n          </Typography>\n        </BulletListItem>\n      </BulletListView>\n      <Typography>\n        Start by creating your react app and installing dependencies mentioned.\n        Note that you don't have to use {links.materialUI}. I use it because it\n        is one of the easiest and complete frameworks out there to get started\n        with.\n      </Typography>\n      <CodeBlock language={\"bash\"}>\n        {`npx create-react-app $GITHUB_USERNAME.github.io\\n`}\n        {`cd $GITHUB_USERNAME.github.io\\n`}\n        {`yarn add gh-pages            # manage pushing to github\\n`}\n        {`yarn add react-router-dom    # routing pages\\n`}\n        {`\\n# Below are optional, choose what you want to use\\n`}\n        {`yarn add @material-ui/core   # core design components\\n`}\n        {`yarn add @material-ui/styles # theming\\n`}\n        {`yarn add @material-ui/icons  # simple icons \\n`}\n        {`yarn add @material-ui/lab    # experimental componments`}\n      </CodeBlock>\n      <Typography>\n        Next, you should add a script to your <Code>package.json</Code> for\n        quick deployment:\n      </Typography>\n      <CodeBlock language={\"json\"}>\n        {`\"scripts\": {\\n`}\n        {`  \"deploy\": \"gh-pages -b master -d build\",\\n`}\n        {`}`}\n      </CodeBlock>\n      <Typography>\n        Now every time you want to publish your site, you can run this:\n      </Typography>\n      <CodeBlock language={\"bash\"}>\n        {`yarn build\\n`}\n        {`yarn deploy`}\n      </CodeBlock>\n    </>\n  );\n};\n\nexport default Overview;\n","import React from \"react\";\nimport { Typography } from \"@material-ui/core\";\nimport links from \"./links\";\nimport {\n  Gap,\n  Code,\n  CodeBlock,\n  FileTreeView,\n  FileTreeItem,\n  BulletListView,\n  BulletListItem,\n} from \"../../../common/content\";\n\nconst Structure = () => {\n  return (\n    <>\n      <Typography>\n        Now that we have our project, we need a way to structure our blog\n        content. We will implement the following:\n      </Typography>\n      <BulletListView dense>\n        <BulletListItem>\n          <Typography>A common overall page layout</Typography>\n        </BulletListItem>\n        <BulletListItem>\n          <Typography>A home component</Typography>\n        </BulletListItem>\n        <BulletListItem>\n          <Typography>A generic post component</Typography>\n        </BulletListItem>\n        <BulletListItem>\n          <Typography>A router so we can reach each page</Typography>\n        </BulletListItem>\n        <BulletListItem>\n          <Typography>A context provider for posts</Typography>\n        </BulletListItem>\n      </BulletListView>\n      <Typography>\n        Below is a file hierarchy that I've worked out. I personally like when\n        imports read like English, so I've chosen to break away from the typical{\" \"}\n        {links.createReactApp} layout just a bit. If you're don't already know,\n        having an <Code>index.jsx</Code> file in your folder allows you to\n        import directly from the folder name.\n      </Typography>\n      <FileTreeView>\n        <FileTreeItem text=\"src\">\n          <FileTreeItem text=\"app\">\n            <FileTreeItem text=\"components\">\n              <FileTreeItem text=\"common\">\n                <FileTreeItem text=\"page\">\n                  <FileTreeItem text=\"body.jsx\" />\n                  <FileTreeItem text=\"footer.jsx\" />\n                  <FileTreeItem text=\"header.jsx\" />\n                  <FileTreeItem text=\"index.jsx\" />\n                </FileTreeItem>\n              </FileTreeItem>\n              <FileTreeItem text=\"home\">\n                <FileTreeItem text=\"index.jsx\" />\n              </FileTreeItem>\n              <FileTreeItem text=\"post\">\n                <FileTreeItem text=\"entry\">\n                  <FileTreeItem text=\"example_entry_using_folder\">\n                    <FileTreeItem text=\"index.json\" />\n                  </FileTreeItem>\n                  <FileTreeItem text=\"example_entry_using_file.jsx\" />\n                </FileTreeItem>\n                <FileTreeItem text=\"index.jsx\" />\n                <FileTreeItem text=\"listing.json\" />\n              </FileTreeItem>\n            </FileTreeItem>\n          </FileTreeItem>\n          <FileTreeItem text=\"context.jsx\" />\n          <FileTreeItem text=\"index.jsx\" />\n          <FileTreeItem text=\"theme.jsx\" />\n        </FileTreeItem>\n      </FileTreeView>\n      <Typography>\n        Let's start with the overall page layout. You'll notice a{\" \"}\n        <Code>src/app/components/common/page</Code> folder. This will be where\n        we define a uniform page layout so every page of your blog has a\n        consistent look and feel. Start by defining empty components for each\n        file in that folder. For example, here is an empty header component:\n      </Typography>\n      <CodeBlock language={\"jsx\"}>\n        {`import React from \"react\";\\n`}\n        {`\\n`}\n        {`const Header = () => {\\n`}\n        {`  return <></>;\\n`}\n        {`}\\n`}\n        {`\\n`}\n        {`export default Header\\n`}\n      </CodeBlock>\n      <Typography>\n        Don't worry about filling in any content yet. Remember, we are only\n        focused on the structure of the code right now. Details and content will\n        come soon! Now that you have components filled out, lets make some\n        additions to the <Code>Page</Code> component in{\" \"}\n        <Code>src/app/components/common/page/index.jsx</Code>.\n      </Typography>\n      <CodeBlock language={\"jsx\"}>\n        {`import React from \"react\";\\n`}\n        {`import { Divider } from \"@material-ui/core\";\\n`}\n        {`\\n`}\n        {`const Page = ({ children }) => {\\n`}\n        {`  return (\\n`}\n        {`    <>\\n`}\n        {`      <Header />\\n`}\n        {`      <Divider />\\n`}\n        {`      <Body>\\n`}\n        {`        {children}\\n`}\n        {`      </Body>\\n`}\n        {`      <Divider />\\n`}\n        {`      <Footer />\\n`}\n        {`    </>\\n`}\n        {`  );\\n`}\n        {`}\\n`}\n        {`\\n`}\n        {`export default Page\\n`}\n      </CodeBlock>\n      <Typography>\n        This simple layout allows us to define every page in terms of a{\" \"}\n        <Code>Page</Code> component, and it's children. Easy! This is probably\n        the simplest form of a reusable component. But for now, lets move on.\n      </Typography>\n      <Gap />\n      <Typography>\n        Go ahead and create components for the <Code>Home</Code> and{\" \"}\n        <Code>Post</Code> components using their respective{\" \"}\n        <Code>index.jsx</Code> files. Each component will be defined using the{\" \"}\n        <Code>Page</Code> component we just created!\n      </Typography>\n      <CodeBlock>\n        {`import React from \"react\";\\n`}\n        {`import { Typography } from \"@material-ui/core\";\\n`}\n        {`\\n`}\n        {`const Home = () => {\\n`}\n        {`  return (\\n`}\n        {`    <Page>\\n`}\n        {`      <Typography>\\n`}\n        {`        Welcome to my blog!\\n`}\n        {`      </Typography>\\n`}\n        {`    </Page>\\n`}\n        {`  );\\n`}\n        {`}\\n`}\n        {`\\n`}\n        {`export default Home\\n`}\n      </CodeBlock>\n      <Typography>\n        In this component, the <Code>Typography</Code> element is passed a child\n        to the <Code>Page</Code> component. However you decide to layout your\n        page is where this content will go! The <Code>Post</Code> component will\n        be almost the same, however it must be generic. Have it accept a{\" \"}\n        <Code>content</Code> prop. This prop will essentially provide a\n        component that will be defined by your post entries!\n      </Typography>\n      <CodeBlock>\n        {`import React from \"react\";\\n`}\n        {`import { Typography } from \"@material-ui/core\";\\n`}\n        {`\\n`}\n        {`const Post = ({ content }) => {\\n`}\n        {`  const { title, Component } = content;`}\n        {`  return (\\n`}\n        {`    <Page>\\n`}\n        {`      <Typography>\\n`}\n        {`        {title}\\n`}\n        {`      </Typography>\\n`}\n        {`      <Component />\\n`}\n        {`    </Page>\\n`}\n        {`  );\\n`}\n        {`}\\n`}\n        {`\\n`}\n        {`export default Post\\n`}\n      </CodeBlock>\n      <Typography>\n        You're probably asking where <Code>title</Code> and{\" \"}\n        <Code>component</Code> come from. The idea behind this is that every\n        post entry is a file that provides the following import:\n      </Typography>\n      <CodeBlock language=\"json\">\n        {`{ content: { title, description, Component } }\\n`}\n      </CodeBlock>\n      <Typography>\n        <Code>title</Code> and <Code>description</Code> are string metadata.{\" \"}\n        <Code>Component</Code> is just a react component! Remember that we will\n        keep a listing of posts in{\" \"}\n        <Code>src/components/post/entry/listing.json</Code> and generate pages\n        for them dynaimcally. This all starts in <Code>src/app/index.jsx</Code>:\n      </Typography>\n      <Typography></Typography>\n      <CodeBlock>\n        {`import React from \"react\";\\n`}\n        {`\\n`}\n        {`const listing = require(\"./components/post/listing.json\");\\n`}\n        {`const posts = listing.map((item) => {\\n`}\n        {`  return { link: item, content: require(\\`./components/post/entry/\\${item}\\`) };\\n`}\n        {`});`}\n      </CodeBlock>\n      <Typography>\n        Notice that we don't actually do any error checking. In this case you\n        probably don't need to. Remember, this is a personal blog, not an\n        enterprise application. Spend your time generating content and don't\n        overcomplicate this :)\n      </Typography>\n      <Gap />\n      <Typography>\n        Now that posts are loaded, we need to route them. Notice above that we\n        simply assigned the item as the <Code>link</Code>. This means that your\n        entry name (the file or folder name) will be used as the URL endpoint.\n        The home page will of course get the root route (<Code>/</Code>).\n      </Typography>\n      <CodeBlock language={\"jsx\"}>\n        {`import { BrowserRouter, Switch, Route } from \"react-router-dom\";\\n`}\n        {`import Home from \"./components/home\";\\n`}\n        {`import Post from \"./components/post\";\\n`}\n        {`\\n`}\n        {`const App = () => {\\n`}\n        {`  return (\\n`}\n        {`    <BrowserRouter>\\n`}\n        {`      <Switch>\\n`}\n        {`        <Route exact path=\"/\">\\n`}\n        {`          <Home />\\n`}\n        {`        </Route>\\n`}\n        {`        {posts.map(({ link, content }) => {\\n`}\n        {`          return (\\n`}\n        {`            <Route key={link} exact path={\\`/\\${link}\\`}>\\n`}\n        {`              <Post content={content} />\\n`}\n        {`            </Route>\\n`}\n        {`          );\\n`}\n        {`        })}\\n`}\n        {`      </Switch>\\n`}\n        {`    </BrowserRouter>\\n`}\n        {`  )\\n`}\n        {`}\\n`}\n        {`\\n`}\n        {`export default App;\\n`}\n      </CodeBlock>\n      <Typography>\n        I won't go into each component from {links.reactRouter}. Check out their\n        site and read a bit about each component if you want to understand their\n        framework in greater detail. At this point all you need to is create\n        your first post entry! Don't forget, you will need to have the following\n        export:\n      </Typography>\n      <CodeBlock language=\"json\">\n        {`{ content: { title, description, Component } }\\n`}\n      </CodeBlock>\n      <Typography>\n        Recall that <Code>Post</Code> was defined to take a <Code>content</Code>{\" \"}\n        prop, and with it extract the <Code>title</Code> and{\" \"}\n        <Code>Component</Code> elements. This means you should be able to write\n        your first blog entry, and it will be reachable by its file or folder\n        name! Go ahead and give it a shot! Write something in{\" \"}\n        <Code>src/app/components/post/entry/</Code>, and visit{\" \"}\n        <Code>localhost:3000/the_entry_name</Code>!\n      </Typography>\n      <Gap />\n      <Typography>\n        Ok your'e almost done. Now that your post architecture is complete and\n        everything is routable, you need to actually link your content to your\n        home page. Recall that we generated <Code>posts</Code> in the{\" \"}\n        <Code>App</Code> component. We need to access this in the{\" \"}\n        <Code>Home</Code> component. To do this, you could pass it down child by\n        child. This is what's usually called \"prop drilling\". In our case it's\n        not really a big deal, but in larger apps this can be a problem. We are\n        going to solve this problem using a React context. What a context\n        provider does, is give access to some state outside the{\" \"}\n        <Code>props</Code> interface.\n      </Typography>\n      <Gap />\n      <Typography>\n        Start by defining the context in <Code>src/app/context.jsx</Code>:\n      </Typography>\n      <CodeBlock>\n        {`import React from \"react\";\\n`}\n        {`\\n`}\n        {`const AppContext = React.createContext();\\n`}\n        {`export default AppContext;\\n`}\n      </CodeBlock>\n      <Typography>\n        Seriously, that's it! Next, we are going to revisit out <Code>App</Code>{\" \"}\n        component. Go back and import the context, then wrap the return code as\n        follows:\n      </Typography>\n      <CodeBlock language={\"jsx\"}>\n        {`import AppContext \"./context\";\\n`}\n        {`...\\n`}\n        {`\\n`}\n        {`const App = () => {\\n`}\n        {`  return (\\n`}\n        {`    <AppContext.Provider value={{ posts }}>\\n`}\n        {`     ...\\n`}\n        {`    </AppContext.Provider>\\n`}\n        {`  )\\n`}\n        {`}\\n`}\n        {`\\n`}\n        {`...\\n`}\n      </CodeBlock>\n      <Typography>\n        Now every child that exists beneath the provider will have the context\n        made available to them, without the prop drilling!\n      </Typography>\n      <Gap />\n      <Typography>\n        So lets revist our <Code>Home</Code> component, and use the react\n        context hook <Code>useContext</Code>.\n      </Typography>\n      <CodeBlock language={\"jsx\"}>\n        {`import React, { useContext } from \"react\";\\n`}\n        {`import AppContext from \"../../context\";\\n`}\n        {`...\\n`}\n        {`\\n`}\n        {`const Home = () => {\\n`}\n        {`  const { posts } = useContext(AppContext)\\n`}\n        {`  return (\\n`}\n        {`    ...\\n`}\n        {`  );\\n`}\n        {`}\\n`}\n        {`\\n`}\n        {`...\\n`}\n      </CodeBlock>\n      <Typography>\n        Excellent, with <Code>useContext</Code>, you can easily access your{\" \"}\n        <Code>posts</Code> anywhere in your application! At this point, it's\n        entirely up to you how you want to showcase your posts. I've used the{\" \"}\n        {links.materialUI} <Code>Grid</Code> component, and a simple{\" \"}\n        <Code>Card</Code> component which I've defined. It's a work in progress,\n        but all of the mechanics are here!\n      </Typography>\n      <CodeBlock language={\"jsx\"}>\n        {`<Page>\\n`}\n        {`  <Grid container>\\n`}\n        {`    {posts.map((post) => (\\n`}\n        {`      <Grid\\n`}\n        {`        item\\n`}\n        {`        key={post.link}\\n`}\n        {`        className={gridStyle}\\n`}\n        {`        xs={12}\\n`}\n        {`        md={6}\\n`}\n        {`        lg={4}\\n`}\n        {`        xl={3}\\n`}\n        {`      >\\n`}\n        {`        <Card post={post} />\\n`}\n        {`      </Grid>\\n`}\n        {`    ))}\\n`}\n        {`  </Grid>\\n`}\n        {`</Page>\\n`}\n      </CodeBlock>\n      <Typography>\n        Well that pretty much covers everything. At this point, you can go back\n        and start and adding some sex appeal to your components! Be sure to\n        check out all {links.materialUI} has to offer. It is a great framework\n        with so many simple to use components. If you're feeling adventurous,\n        try out a few different ones and see what each has to offer!\n      </Typography>\n      <Gap />\n      <Typography>Cheers</Typography>\n    </>\n  );\n};\n\nexport default Structure;\n"],"sourceRoot":""}